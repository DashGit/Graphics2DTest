/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.mycompany.graphics2dtest;

import java.awt.BasicStroke;
import java.awt.Font;
import java.awt.FontMetrics;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.RenderingHints;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.geom.Arc2D;
import java.awt.geom.Line2D;
import java.awt.geom.Rectangle2D;

/**
 *
 * @author Dot_Dash
 */
public class Typewriter extends javax.swing.JPanel implements KeyListener {
    
    private boolean releasedKey = true;
    private String charsPressed = "";
    private int charsPressedStringWidth;
    private int charsPressedNewlineAmt;
    private long nextKeyPressedTime;
    private long currentTime;
    
    private int charX = 5;
    private int charY = 120;

    /**
     * Creates new form Typewriter
     */
    public Typewriter() {
        initComponents();
    }
    
    private void drawString(Graphics2D g2, String text, int x, int y) {
        for (String line : text.split("\n"))
            g2.drawString(line, x, y += g2.getFontMetrics().getHeight());
    }
    
    @Override
    public void paint(Graphics g) {
        // Initial graphics setup
        super.paint(g);
        Graphics2D g2 = (Graphics2D)g; 
        g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON); 
        Font font = new Font("Sans Serif", Font.PLAIN, 18);
        g2.setFont(font); 
        FontMetrics metrics = g.getFontMetrics(font);
        charsPressedStringWidth = metrics.stringWidth(charsPressed) - (this.getWidth() * charsPressedNewlineAmt);
        
        // Draw a smiley face in the top left :)
        double smileyX = 150;
        double smileyY = 0;
        g2.setStroke(new BasicStroke(2.0f));
        g2.draw(new Line2D.Double(smileyX + 20, smileyY + 20, smileyX + 20, smileyY + 40));
        g2.draw(new Line2D.Double(smileyX + 40, smileyY + 20, smileyX + 40, smileyY + 40));
        g2.draw(
        new Arc2D.Double(
        new Rectangle2D.Double(smileyX + 20, smileyY + 45, 20, 20),
        180, // Starting angle 
        180, // Angular extent (length of the arc)
        Arc2D.OPEN));
        
        // Draw welcome text
        String welcomeText = "yo type something";
        g2.drawString(welcomeText, 5, 65);
        
        // Add a key listener to this JPanel
        jtfInputListener.addKeyListener(this);
        
        // Character drawing logic
        if (charsPressedStringWidth >= this.getWidth()) {
            charsPressed += "\n";
            charsPressedNewlineAmt++;
        }
        drawString(g2, charsPressed, charX, charY);
    }
    
    @Override
    public void keyTyped(KeyEvent e) {
        if (releasedKey) {
            currentTime = System.currentTimeMillis();
            if (currentTime >= nextKeyPressedTime) {
                if ((int)e.getKeyChar() == 8) {
                    charsPressed = charsPressed.substring(0, charsPressed.length() - 1);
                } else {
                    charsPressed += String.valueOf(e.getKeyChar());
                }
                releasedKey = false;
                nextKeyPressedTime = currentTime + 20;
                
                repaint();
            }
        } else {
            releasedKey = true;
        }
    }
    
    @Override
    public void keyPressed(KeyEvent e) {
        //Unused
    }
    
    @Override
    public void keyReleased(KeyEvent e) {
        //Unused
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jtfInputListener = new javax.swing.JTextField();

        jtfInputListener.setEditable(false);
        jtfInputListener.setPreferredSize(new java.awt.Dimension(480, 600));
        jtfInputListener.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jtfInputListenerActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jtfInputListener, javax.swing.GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jtfInputListener, javax.swing.GroupLayout.DEFAULT_SIZE, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jtfInputListenerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jtfInputListenerActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jtfInputListenerActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField jtfInputListener;
    // End of variables declaration//GEN-END:variables
}
